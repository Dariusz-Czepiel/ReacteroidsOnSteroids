{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\GameCanvas.svelte",
    "..\\..\\UI.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onMount, onDestroy } from 'svelte';\r\nimport Asteroid from './objects/Asteroids';\r\nimport Ship from './objects/Ship';\r\nimport UI from './UI.svelte';\r\nimport GameCanvas from './GameCanvas.svelte';\r\nimport { randomNumBetweenExcluding } from './functional/helpers';\r\nimport { screen, keys, asteroidCount, gameData, topScore } from './functional/Stores';\r\n;\r\n// const KEY = {\r\n// \tLEFT:  37,\r\n// \tRIGHT: 39,\r\n// \tUP: 38,\r\n// \tA: 65,\r\n// \tD: 68,\r\n// \tW: 87,\r\n// \tSPACE: 32\r\n// };\r\nlet objects = {\r\n    ship: [],\r\n    asteroids: [],\r\n    bullets: [],\r\n    particles: [],\r\n};\r\nlet context = null;\r\nlet canvasRef;\r\n//obluga przyciskow\r\nconst handleKeys = (e) => {\r\n    let keysTemp = $keys;\r\n    const isPressed = e.type === 'keydown';\r\n    //TODO zmien to na key i zobacz jakie sa\r\n    //console.log(e.code);\r\n    //sprawdz jeszcze e.code\r\n    if (e.key.toLowerCase() === 'a' || e.key === 'ArrowLeft')\r\n        $keys.left = isPressed;\r\n    if (e.key.toLowerCase() === 'd' || e.key === 'ArrowRight')\r\n        $keys.right = isPressed;\r\n    if (e.key.toLowerCase() === 'w' || e.key === 'ArrowUp')\r\n        $keys.up = isPressed;\r\n    if (e.key === ' ')\r\n        $keys.space = isPressed;\r\n    // if(e.keyCode === KEY.LEFT   || e.keyCode === KEY.A) $keys.left  = isPressed;\r\n    // if(e.keyCode === KEY.RIGHT  || e.keyCode === KEY.D) $keys.right = isPressed;\r\n    // if(e.keyCode === KEY.UP     || e.keyCode === KEY.W) $keys.up    = isPressed;\r\n    // if(e.keyCode === KEY.SPACE) $keys.space = isPressed;\r\n    keys.set(keysTemp);\r\n};\r\nonMount(() => {\r\n    window.addEventListener('keyup', handleKeys);\r\n    window.addEventListener('keydown', handleKeys);\r\n    const context2D = canvasRef.getContext('2d');\r\n    startGame();\r\n    context = context2D;\r\n    requestAnimationFrame(() => { update(); });\r\n});\r\nonDestroy(() => {\r\n    window.removeEventListener('keyup', handleKeys);\r\n    window.removeEventListener('keydown', handleKeys);\r\n});\r\n//dzieje sie za kazdym razem kiedy cos sie zmienia na canvas\r\nconst update = () => {\r\n    if (context != null) {\r\n        const contextTemp = context;\r\n        contextTemp.save();\r\n        contextTemp.scale($screen.ratio, $screen.ratio);\r\n        // Motion trail\r\n        contextTemp.fillStyle = '#000';\r\n        contextTemp.globalAlpha = 0.4;\r\n        contextTemp.fillRect(0, 0, $screen.width, $screen.height);\r\n        contextTemp.globalAlpha = 1;\r\n        // Next set of asteroids\r\n        if (!objects.asteroids.length) {\r\n            let count = $asteroidCount + 1;\r\n            asteroidCount.set(count);\r\n            generateAsteroids(count);\r\n        }\r\n        // Check for colisions\r\n        checkCollisionsWith(objects.bullets, objects.asteroids);\r\n        checkCollisionsWith(objects.ship, objects.asteroids);\r\n        // Remove or render\r\n        updateObjects(objects.particles, 'particles');\r\n        updateObjects(objects.asteroids, 'asteroids');\r\n        updateObjects(objects.bullets, 'bullets');\r\n        updateObjects(objects.ship, 'ship');\r\n        contextTemp.restore();\r\n    }\r\n    // Next frame\r\n    requestAnimationFrame(() => { update(); });\r\n};\r\nconst addScore = (points) => {\r\n    if ($gameData.inGame) {\r\n        gameData.update(gd => (Object.assign(Object.assign({}, gd), { currentScore: gd.currentScore + points })));\r\n    }\r\n};\r\n//zaczyna gre\r\n//tworzy statek i pierwsze asteroidy\r\nconst startGame = () => {\r\n    gameData.set({ inGame: true, currentScore: 0 });\r\n    // Make ship\r\n    const ship = new Ship({\r\n        position: {\r\n            x: $screen.width / 2,\r\n            y: $screen.height / 2\r\n        },\r\n        create: createObject.bind(this),\r\n        onDie: gameOver.bind(this)\r\n    });\r\n    createObject(ship, 'ship');\r\n    // Make asteroids\r\n    objects.asteroids = [];\r\n    generateAsteroids($asteroidCount);\r\n};\r\n//konczy gre\r\n//zapisuje najlepszy wynik i wyswietla div-a z Game Over\r\nconst gameOver = () => {\r\n    gameData.update(gd => (Object.assign(Object.assign({}, gd), { inGame: false })));\r\n    // Replace top score\r\n    if ($gameData.currentScore > $topScore) {\r\n        topScore.set($gameData.currentScore);\r\n        localStorage['topscore'] = $gameData.currentScore;\r\n    }\r\n};\r\n//generuje asteroidy w ilosci takiej jak howMany\r\nconst generateAsteroids = (howMany) => {\r\n    //let asteroids = [];\r\n    let myShip = objects.ship[0];\r\n    //console.log(objects.ship);\r\n    for (let i = 0; i < howMany; i++) {\r\n        let asteroid = new Asteroid({\r\n            size: 80,\r\n            position: {\r\n                x: randomNumBetweenExcluding(0, $screen.width, myShip.position.x - 60, myShip.position.x + 60),\r\n                y: randomNumBetweenExcluding(0, $screen.height, myShip.position.y - 60, myShip.position.y + 60)\r\n            },\r\n            create: createObject.bind(this),\r\n            addScore: addScore.bind(this)\r\n        });\r\n        createObject(asteroid, 'asteroids');\r\n    }\r\n};\r\n//dodaje statki,asteroidy,pociski i efekty\r\nconst createObject = (item, group) => {\r\n    objects[group].push(item);\r\n};\r\n//aktualizuje statki,asteroidy,pociski i efekty\r\nconst updateObjects = (items, group) => {\r\n    //console.log(items);\r\n    let index = 0;\r\n    for (let item of items) {\r\n        if (item.delete) {\r\n            objects[group].splice(index, 1);\r\n        }\r\n        else {\r\n            items[index].render({\r\n                screen: $screen, context, keys: $keys, asteroidCount: $asteroidCount,\r\n                topScore: $topScore, currentScore: $gameData.currentScore, inGame: $gameData.inGame\r\n            });\r\n        }\r\n        index++;\r\n    }\r\n};\r\n//sprawdza zderzenie sie 2 obiektow np.: czy asteroida zderzyla sie z statkiem\r\nconst checkCollisionsWith = (items1, items2) => {\r\n    var a = items1.length - 1;\r\n    var b;\r\n    for (a; a > -1; --a) {\r\n        b = items2.length - 1;\r\n        for (b; b > -1; --b) {\r\n            var item1 = items1[a];\r\n            var item2 = items2[b];\r\n            if (checkCollision(item1, item2)) {\r\n                item1.destroy();\r\n                item2.destroy();\r\n            }\r\n        }\r\n    }\r\n};\r\nconst checkCollision = (obj1, obj2) => {\r\n    var vx = obj1.position.x - obj2.position.x;\r\n    var vy = obj1.position.y - obj2.position.y;\r\n    var length = Math.sqrt(vx * vx + vy * vy);\r\n    if (length < obj1.radius + obj2.radius) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nlet message;\r\n//kod ponizej obsluguje koniec gry\r\n$: if ($gameData.currentScore <= 0) {\r\n    message = '0 points... So sad.';\r\n}\r\nelse if ($gameData.currentScore >= $topScore) {\r\n    message = 'Top score with ' + $gameData.currentScore + ' points. Woo!';\r\n}\r\nelse {\r\n    message = $gameData.currentScore + ' Points though :)';\r\n}\r\n</script>\n\n<div class=\"container\">\n  <UI gameData={$gameData} {message} topScore={$topScore} {startGame} />\n  <GameCanvas bind:canvasRef={canvasRef} />\n</div>\n\n<style>\n\t.container {\n\tpadding: 0;\n\tmargin: 0;\n\t/*font-family: 'PT Mono', serif;*/\n\tcolor: #ffffff;\n  }\n</style>",
    "<script lang=\"ts\">import { onMount, onDestroy } from 'svelte';\r\nimport { screen } from './functional/Stores';\r\nexport let canvasRef;\r\nconst handleResize = (e) => {\r\n    screen.set({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        ratio: window.devicePixelRatio || 1,\r\n    });\r\n};\r\nonMount(() => {\r\n    window.addEventListener('resize', handleResize);\r\n});\r\nonDestroy(() => {\r\n    window.removeEventListener('resize', handleResize);\r\n});\r\n</script>\r\n\r\n<canvas bind:this={canvasRef}\r\n    width={$screen.width * $screen.ratio}\r\n    height={$screen.height * $screen.ratio}\r\n/>\r\n\r\n<style>\r\n  canvas {\r\n\tdisplay: block;\r\n\tbackground-color: #000000;\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n  }\r\n</style>",
    "<script lang=\"ts\">;\r\nexport let gameData;\r\nexport let message;\r\nexport let topScore;\r\nexport let startGame;\r\n</script>\r\n\r\n{#if !gameData.inGame}\r\n    <div class=\"endgame\">\r\n    <p>Game over, man!</p>\r\n    <p>{message}</p>\r\n    <button on:click={ () => startGame() }>\r\n        try again?\r\n    </button>\r\n    </div>\r\n{/if}\r\n<span class=\"score current-score\" >Score: {gameData.currentScore}</span>\r\n<span class=\"score top-score\" >Top Score: {topScore}</span>\r\n<span class=\"controls\" >\r\n    Use [A][S][W][D] or [←][↑][↓][→] to MOVE<br/>\r\n    Use [SPACE] to SHOOT\r\n</span>\r\n\r\n<style>\r\n.endgame{\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\tpadding: 16px;\r\n\tz-index: 1;\r\n\ttext-align: center;\r\n\tfont-size: 1.2rem;\r\n  }\r\n  .current-score {\r\n\tleft: 20px;\r\n  }\r\n  .top-score {\r\n\tright: 20px;\r\n  }\r\n  .score {\r\n\tdisplay: block;\r\n\tposition: absolute;\r\n\ttop: 15px;\r\n\tz-index: 1;\r\n\tfont-size: 1.3rem;\r\n  }\r\n  .controls {\r\n\tdisplay: block;\r\n\tposition: absolute;\r\n\ttop: 15px;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, 0);\r\n\tz-index: 1;\r\n\tfont-size: 1rem;\r\n\ttext-align: center;\r\n\tline-height: 1.6;\r\n  }\r\n  button{\r\n\tborder: 4px solid #ffffff;\r\n\tbackground-color: transparent;\r\n\tcolor: #ffffff;\r\n\tfont-size: 1rem;\r\n\tpadding: 10px 20px;\r\n\tmargin: 10px;\r\n\t/*font-family: 'PT Mono', serif;*/\r\n\tcursor: pointer;\r\n  }\r\n  button:hover{\r\n\tbackground-color: #ffffff;\r\n\tcolor: #000000;\r\n  }\r\n</style>"
  ],
  "names": [],
  "mappings": "AA4MC,UAAU,cAAC,CAAC,AACZ,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CAET,KAAK,CAAE,OAAO,AACb,CAAC;ACzLD,MAAM,eAAC,CAAC,AACT,OAAO,CAAE,KAAK,CACd,gBAAgB,CAAE,OAAO,CACzB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACX,CAAC;ACVH,uBAAQ,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,MAAM,AAChB,CAAC,AACD,cAAc,eAAC,CAAC,AACjB,IAAI,CAAE,IAAI,AACT,CAAC,AACD,UAAU,eAAC,CAAC,AACb,KAAK,CAAE,IAAI,AACV,CAAC,AACD,MAAM,eAAC,CAAC,AACT,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,MAAM,AAChB,CAAC,AACD,SAAS,eAAC,CAAC,AACZ,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC,CAC7B,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,GAAG,AACf,CAAC,AACD,qBAAM,CAAC,AACR,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,gBAAgB,CAAE,WAAW,CAC7B,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,IAAI,CAEZ,MAAM,CAAE,OAAO,AACd,CAAC,AACD,qBAAM,MAAM,CAAC,AACd,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,AACb,CAAC"
}